{
  "name": "dotenv",
  "version": "0.2.4",
  "description": "Loads environment variables from .env",
  "main": "lib/main.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/scottmotte/dotenv.git"
  },
  "keywords": [
    "dotenv",
    "env",
    ".env",
    "environment",
    "variables",
    "config",
    "settings"
  ],
  "readmeFilename": "README.md",
  "author": {
    "name": "scottmotte"
  },
  "license": "BSD",
  "devDependencies": {
    "mocha": "",
    "should": ""
  },
  "readme": "# dotenv\n\nDotenv loads environment variables from .env into ENV (process.env).\n\n[![BuildStatus](https://travis-ci.org/scottmotte/dotenv.png?branch=master)](https://travis-ci.org/scottmotte/dotenv)\n[![NPM version](https://badge.fury.io/js/dotenv.png)](http://badge.fury.io/js/dotenv)\n\n> \"Storing [configuration in the environment](http://www.12factor.net/config) is one of the tenets of a [twelve-factor app](http://www.12factor.net/). Anything that is likely to change between deployment environments–such as resource handles for databases or credentials for external services–should be extracted from the code into environment variables.\n> \n> But it is not always practical to set environment variables on development machines or continuous integration servers where multiple projects are run. Dotenv load variables from a `.env` file into ENV when the environment is bootstrapped.\"\n> \n> [Brandon Keepers' Dotenv in Ruby](https://github.com/bkeepers/dotenv)\n\n## Installation\n\nAs early as possible in your application require dotenv and load the .env variables. \n\n```javascript\nvar dotenv = require('dotenv');\ndotenv.load();\n```\n\nIMPORTANT: In pre `0.2.0`, you instantiated dotenv like the following with the bagels. \n\n```javascript\nvar dotenv = require('dotenv')();\ndotenv.load();\n```\n\n## Usage\n\nAdd your application configuration to your .env file in the root of your project:\n\n```\nS3_BUCKET=YOURS3BUCKET\nSECRET_KEY=YOURSECRETKEYGOESHERE\nSENDGRID_USERNAME=YOURSENDGRIDUSERNAME\nSENDGRID_PASSWORD=YOURSENDGRIDPASSWORDGOESHERE\n```\n\nWhenever your application loads, these variables will be available in `process.env`:\n\n```javascript\nvar sendgrid_username = process.env.SENDGRID_USERNAME;\n```\n\n## Should I commit my .env file?\n\nTry not to commit your .env file to version control. It is best to keep it local to your machine and local on any machine you deploy to. Keep production credential .envs on your production machines, and keep development .envs on your local machine.\n\n## Contributing\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Added some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n## Running tests\n\n```bash\nnpm install\nnpm test\n```\n\n",
  "bugs": {
    "url": "https://github.com/scottmotte/dotenv/issues"
  },
  "homepage": "https://github.com/scottmotte/dotenv",
  "_id": "dotenv@0.2.4",
  "dist": {
    "shasum": "6947d3e9b66334c257b27785cf4a9893d6beff75"
  },
  "_from": "dotenv@",
  "_resolved": "https://registry.npmjs.org/dotenv/-/dotenv-0.2.4.tgz"
}
